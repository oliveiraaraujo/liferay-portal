definition {

	macro addMultipleIndices {
		var curlCluster1 = '''
			http://localhost:9200/federated_index/_doc/1?pretty \
				-H 'Content-Type: application/json' \
				-d '{"demo" : "cluster one"}'
		''';

		var curlCluster2 = '''
			http://localhost:9202/federated_index/_doc/1?pretty \
				-H 'Content-Type: application/json' \
				-d '{"demo" : "cluster two"}'
		''';

		com.liferay.poshi.runner.util.JSONCurlUtil.post("${curlCluster1}");

		com.liferay.poshi.runner.util.JSONCurlUtil.post("${curlCluster2}");
	}

	macro assertEngineVendorAndVersions {
		if (IsElementNotPresent(locator1 = "SearchAdmin#ELASTICSEARCH6_ENGINE_VENDOR")) {
			AssertTextEquals.assertPartialText(
				locator1 = "SearchAdmin#SEARCH_ENGINE_VENDOR",
				value1 = "${engineVendor}");

			AssertTextEquals.assertPartialText(
				locator1 = "SearchAdmin#CLIENT_VERSION",
				value1 = "${clientVersion}");

			Panel.expandPanel(panel = "Nodes (1)");

			AssertTextEquals.assertPartialText(
				locator1 = "SearchAdmin#SERVER_VERSION",
				value1 = "${serverVersion}");
		}
		else {
			AssertTextEquals.assertPartialText(
				locator1 = "SearchAdmin#ELASTICSEARCH6_ENGINE_VENDOR",
				value1 = "${engineVendor}");

			AssertTextEquals.assertPartialText(
				locator1 = "SearchAdmin#ELASTICSEARCH6_CLIENT_VERSION",
				value1 = "${clientVersion}");

			AssertTextEquals.assertPartialText(
				locator1 = "SearchAdmin#ELASTICSEARCH6_NODES",
				value1 = "${serverVersion}");
		}
	}

	macro executeSearchActions {
		AssertTextEquals(
			locator1 = "Portlet#HEADER",
			value1 = "Search");

		if (IsElementPresent(locator1 = "SearchAdmin#ELASTICSEARCH6_ENGINE_VENDOR")) {
			var searchClientVersion = selenium.getText("SearchAdmin#ELASTICSEARCH6_CLIENT_VERSION");
			var searchEngineVendor = selenium.getText("SearchAdmin#ELASTICSEARCH6_ENGINE_VENDOR");
		}
		else {
			var searchClientVersion = selenium.getText("SearchAdmin#CLIENT_VERSION");
			var searchEngineVendor = selenium.getText("SearchAdmin#SEARCH_ENGINE_VENDOR");
		}

		if (contains("${searchEngineVendor}", "Elasticsearch")) {
			if (contains("${searchClientVersion}", "7.") && contains("${searchEngineVendor}", "Embedded")) {
				var curl = "http://localhost:9201/_tasks";
			}
			else {
				var curl = "http://localhost:9200/_tasks";
			}
		}

		Navigator.gotoNavItem(navItem = "Index Actions");

		AssertClick.assertTextClickAt(
			key_actionsDescription = "${actionsDescription}",
			locator1 = "Button#EXECUTE_ACTION",
			value1 = "Execute");

		var reindexElapsedTime = "0";
		var reindexStartTime = "0";

		if (contains("${searchEngineVendor}", "Elasticsearch")) {
			echo("Current Elasticsearch Tasks:");

			var elasticsearchTasks = JSONCurlUtil.get("${curl}");

			while ((!(contains("${elasticsearchTasks}", "indices:data/write/bulk"))) && ("${reindexStartTime}" != "60")) {
				Pause.pauseNoSPARefresh(locator1 = "5000");

				var reindexStartTime = ${reindexStartTime} + 5;

				echo("Current Elasticsearch Tasks:");

				elasticsearchTasks = JSONCurlUtil.get("${curl}");
			}

			if ("${reindexStartTime}" == "60") {
				echo("Elasticsearch failed to receive reindex request after 60 seconds.");
			}
			else {
				echo("Started reindexing ${reindexStartTime} second(s) after clicking 'Execute'.");
			}

			while (((contains("${elasticsearchTasks}", "indices:data/write/bulk")) || IsElementPresent(locator1 = "ControlMenu#RELOAD_TOOLTIP")) && ("${reindexElapsedTime}" != "120")) {
				Pause.pauseNoSPARefresh(locator1 = "10000");

				var reindexElapsedTime = ${reindexElapsedTime} + 10;

				echo("Current Elasticsearch Tasks:");

				elasticsearchTasks = JSONCurlUtil.get("${curl}");
			}
		}
		else if (contains("${searchEngineVendor}", "Solr")) {
			while ((IsElementNotPresent(locator1 = "ControlMenu#RELOAD_TOOLTIP")) && ("${reindexStartTime}" != "60")) {
				Pause.pauseNoSPARefresh(locator1 = "5000");

				var reindexStartTime = ${reindexStartTime} + 5;
			}

			if ("${reindexStartTime}" == "60") {
				echo("Solr failed to receive reindex request after 60 seconds.");
			}
			else {
				echo("Started reindexing ${reindexStartTime} second(s) after clicking 'Execute'.");
			}

			while ((IsElementPresent(locator1 = "ControlMenu#RELOAD_TOOLTIP")) && ("${reindexElapsedTime}" != "120")) {
				Pause.pauseNoSPARefresh(locator1 = "10000");

				var reindexElapsedTime = ${reindexElapsedTime} + 10;
			}
		}

		takeScreenshot();

		if ("${reindexElapsedTime}" == "120") {
			fail("Reindex timed out after 120 seconds.");
		}
		else {
			echo("Finished reindexing after ${reindexElapsedTime} seconds.");
		}
	}

}