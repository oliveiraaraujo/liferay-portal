@component-name = "portal-wcm"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Site Pages Administration";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();

		JSONGroup.addGroup(groupName = "Test Site Name");
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "Test Site Name");
		}
	}

	@description = "This is for LPS-110108. Adding a fourth level child page and viewing it on Page admin."
	@priority = "5"
	test AddPageWithFourthLevelChildPagesToSite {
		property testray.component.names = "Site Pages Administration";

		JSONLayout.addPublicLayout(
			groupName = "Test Site Name",
			layoutName = "Site Page");

		JSONLayout.addPublicLayout(
			groupName = "Test Site Name",
			layoutName = "First Level Child Page",
			parentLayoutName = "Site Page");

		JSONLayout.addPublicLayout(
			groupName = "Test Site Name",
			layoutName = "Second Level Child Page",
			parentLayoutName = "First Level Child Page");

		JSONLayout.addPublicLayout(
			groupName = "Test Site Name",
			layoutName = "Third Level Child Page",
			parentLayoutName = "Second Level Child Page");

		JSONLayout.addPublicLayout(
			groupName = "Test Site Name",
			layoutName = "Fourth Level Child Page",
			parentLayoutName = "Third Level Child Page");

		SitePages.openPagesAdmin(siteURLKey = "test-site-name");

		Page.view(
			depth = "2",
			pageName = "First Level Child Page",
			privacy = "Public Pages");

		Page.view(
			depth = "3",
			pageName = "Second Level Child Page",
			privacy = "Public Pages");

		Page.view(
			depth = "4",
			pageName = "Third Level Child Page",
			privacy = "Public Pages");

		Page.view(
			depth = "5",
			pageName = "Fourth Level Child Page",
			privacy = "Public Pages");
	}

	@description = "This is a test for LPS-76825. A user can search for a page from pages admin."
	@priority = "5"
	test SearchPages {
		task ("Add two pages to root and add one child page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Page One");

			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Page Two");

			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Page Three",
				parentLayoutName = "Page One");
		}

		task ("Navigate to pages administration") {
			SitePages.openPagesAdmin(siteURLKey = "test-site-name");
		}

		task ("Search for all three pages and assert they all appear") {
			Search.searchCP(searchTerm = "page");

			AssertTextEquals(
				locator1 = "//tr[1]/td[2]",
				value1 = "Page One");

			AssertTextEquals(
				locator1 = "//tr[1]/td[3]",
				value1 = "Page One");

			AssertTextEquals(
				locator1 = "//tr[2]/td[2]",
				value1 = "Page Two");

			AssertTextEquals(
				locator1 = "//tr[2]/td[3]",
				value1 = "Page Two");

			AssertTextEquals(
				locator1 = "//tr[3]/td[2]",
				value1 = "Page Three");

			AssertTextEquals(
				locator1 = "//tr[3]/td[3]",
				value1 = "Page One Page Three");
		}

		task ("Search for one page and assert only that page appears") {
			Search.searchCP(searchTerm = "one");

			AssertTextEquals(
				locator1 = "//tr[1]/td[2]",
				value1 = "Page One");

			AssertTextEquals(
				locator1 = "//tr[1]/td[3]",
				value1 = "Page One");

			AssertElementNotPresent(locator1 = "//tr/td[2][contains(.,'Page Two')]");

			AssertElementNotPresent(locator1 = "//tr/td[2][contains(.,'Page Three')]");
		}

		task ("Search for child page and assert that page appears") {
			Search.searchCP(searchTerm = "three");

			AssertTextEquals(
				locator1 = "//tr[1]/td[2]",
				value1 = "Page Three");

			AssertTextEquals(
				locator1 = "//tr[1]/td[3]",
				value1 = "Page One Page Three");

			AssertElementNotPresent(locator1 = "//tr/td[2][contains(.,'Page One')]");

			AssertElementNotPresent(locator1 = "//tr/td[2][contains(.,'Page Two')]");
		}
	}

}