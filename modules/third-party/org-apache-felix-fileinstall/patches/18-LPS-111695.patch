diff --git a/org/apache/felix/fileinstall/ArtifactInstaller.java b/org/apache/felix/fileinstall/ArtifactInstaller.java
index 65305aa..64f5cdf 100644
--- a/org/apache/felix/fileinstall/ArtifactInstaller.java
+++ b/org/apache/felix/fileinstall/ArtifactInstaller.java
@@ -1,5 +1,4 @@
 /**
- *
  * Licensed to the Apache Software Foundation (ASF) under one or more
  * contributor license agreements.  See the NOTICE file distributed with
  * this work for additional information regarding copyright ownership.
@@ -15,6 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package org.apache.felix.fileinstall;
 
 import java.io.File;
@@ -30,28 +30,28 @@ import java.io.File;
  * artifacts will be reported as new, while any deleted artifact
  * won't be reported as deleted.
  */
-public interface ArtifactInstaller extends ArtifactListener
-{
+public interface ArtifactInstaller extends ArtifactListener {
 
-    /**
-     * Install the artifact
-     *
-     * @param artifact the artifact to be installed
-     */
-    void install(File artifact) throws Exception;
+	/**
+	 * Install the artifact
+	 *
+	 * @param artifact the artifact to be installed
+	 */
+	public void install(File artifact) throws Exception;
 
-    /**
-     * Update the artifact
-     *
-     * @param artifact the artifact to be updated
-     */
-    void update(File artifact) throws Exception;
+	/**
+	 * Uninstall the artifact
+	 *
+	 * @param artifact the artifact to be uninstalled
+	 */
+	public void uninstall(File artifact) throws Exception;
 
-    /**
-     * Uninstall the artifact
-     * 
-     * @param artifact the artifact to be uninstalled
-     */
-    void uninstall(File artifact) throws Exception;
+	/**
+	 * Update the artifact
+	 *
+	 * @param artifact the artifact to be updated
+	 */
+	public void update(File artifact) throws Exception;
 
 }
+/* @generated */
\ No newline at end of file
diff --git a/org/apache/felix/fileinstall/ArtifactListener.java b/org/apache/felix/fileinstall/ArtifactListener.java
index 8e29d15..a6a312d 100644
--- a/org/apache/felix/fileinstall/ArtifactListener.java
+++ b/org/apache/felix/fileinstall/ArtifactListener.java
@@ -1,5 +1,4 @@
 /**
- *
  * Licensed to the Apache Software Foundation (ASF) under one or more
  * contributor license agreements.  See the NOTICE file distributed with
  * this work for additional information regarding copyright ownership.
@@ -15,31 +14,31 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package org.apache.felix.fileinstall;
 
 import java.io.File;
 
 /**
  * Interface representing a custom deployment mechanism.
- * 
+ *
  * Classes must implement one of its sub-interface, either
  * {@link ArtifactTransformer} or
  * {@link ArtifactInstaller}.
- *
  */
-public interface ArtifactListener
-{
-	
+public interface ArtifactListener {
+
 	/**
-     * Returns true if the listener can process the given artifact.
-     *
-     * Error occuring when checking the artifact should be catched
-     * and not be thrown.
-     *
-     * @param artifact the artifact to check
-     * @return <code>true</code> if this listener supports
-     *         the given artifact, <code>false</code> otherwise
-     */
-    boolean canHandle(File artifact);
+	 * Returns true if the listener can process the given artifact.
+	 *
+	 * Error occuring when checking the artifact should be catched
+	 * and not be thrown.
+	 *
+	 * @param artifact the artifact to check
+	 * @return <code>true</code> if this listener supports
+	 *         the given artifact, <code>false</code> otherwise
+	 */
+	public boolean canHandle(File artifact);
 
 }
+/* @generated */
\ No newline at end of file
diff --git a/org/apache/felix/fileinstall/ArtifactTransformer.java b/org/apache/felix/fileinstall/ArtifactTransformer.java
index a0b1198..ee47d21 100644
--- a/org/apache/felix/fileinstall/ArtifactTransformer.java
+++ b/org/apache/felix/fileinstall/ArtifactTransformer.java
@@ -1,5 +1,4 @@
 /**
- *
  * Licensed to the Apache Software Foundation (ASF) under one or more
  * contributor license agreements.  See the NOTICE file distributed with
  * this work for additional information regarding copyright ownership.
@@ -15,6 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package org.apache.felix.fileinstall;
 
 import java.io.File;
@@ -22,15 +22,14 @@ import java.io.File;
 /**
  * Objects implementing this interface are able to convert certain
  * kind of artifacts to OSGi bundles.
- *
  */
-public interface ArtifactTransformer extends ArtifactListener
-{
+public interface ArtifactTransformer extends ArtifactListener {
 
-    /**
-     * Process the given file (canHandle returned true previously)
-     * Can return <null> or a pointer to a transformed file.
-     */
-     File transform(File artifact, File tmpDir) throws Exception;
+	/**
+	 * Process the given file (canHandle returned true previously)
+	 * Can return <null> or a pointer to a transformed file.
+	 */
+	public File transform(File artifact, File tmpDir) throws Exception;
 
 }
+/* @generated */
\ No newline at end of file
diff --git a/org/apache/felix/fileinstall/ArtifactUrlTransformer.java b/org/apache/felix/fileinstall/ArtifactUrlTransformer.java
index c860918..28a8cc1 100644
--- a/org/apache/felix/fileinstall/ArtifactUrlTransformer.java
+++ b/org/apache/felix/fileinstall/ArtifactUrlTransformer.java
@@ -1,5 +1,4 @@
 /**
- *
  * Licensed to the Apache Software Foundation (ASF) under one or more
  * contributor license agreements.  See the NOTICE file distributed with
  * this work for additional information regarding copyright ownership.
@@ -15,6 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package org.apache.felix.fileinstall;
 
 import java.net.URL;
@@ -23,16 +23,17 @@ import java.net.URL;
  * Objects implementing this interface are able to convert certain
  * kind of artifacts to OSGi bundles on the fly through an URL handler.
  *
- * This kind of artifact listener should be favored over the {@link ArtifactTransformer}
- * because it allows the use of the OSGi update feature on bundles.
+ * This kind of artifact listener should be favored over the
+ * {@link ArtifactTransformer} because it allows the use of the OSGi update
+ * feature on bundles.
  */
-public interface ArtifactUrlTransformer extends ArtifactListener
-{
+public interface ArtifactUrlTransformer extends ArtifactListener {
 
-    /**
-     * Process the given file (canHandle returned true previously)
-     * Can return <null> or a pointer to a transformed file.
-     */
-     URL transform(URL artifact) throws Exception;
+	/**
+	 * Process the given file (canHandle returned true previously)
+	 * Can return <null> or a pointer to a transformed file.
+	 */
+	public URL transform(URL artifact) throws Exception;
 
-}
\ No newline at end of file
+}
+/* @generated */
\ No newline at end of file
diff --git a/org/apache/felix/utils/collections/DictionaryAsMap.java b/org/apache/felix/utils/collections/DictionaryAsMap.java
index 795e408..ea2aef5 100644
--- a/org/apache/felix/utils/collections/DictionaryAsMap.java
+++ b/org/apache/felix/utils/collections/DictionaryAsMap.java
@@ -16,6 +16,7 @@
  * specific language governing permissions and limitations
  * under the License.
  */
+
 package org.apache.felix.utils.collections;
 
 import java.util.AbstractMap;
@@ -29,82 +30,87 @@ import java.util.Set;
 /**
  * A wrapper around a dictionary access it as a Map
  */
-public class DictionaryAsMap<U, V> extends AbstractMap<U, V>
-{
-
-    private Dictionary<U, V> dict;
-
-    public DictionaryAsMap(Dictionary<U, V> dict)
-    {
-        this.dict = dict;
-    }
-
-    @Override
-    public Set<Entry<U, V>> entrySet()
-    {
-        return new AbstractSet<Entry<U, V>>()
-        {
-            @Override
-            public Iterator<Entry<U, V>> iterator()
-            {
-                final Enumeration<U> e = dict.keys();
-                return new Iterator<Entry<U, V>>()
-                {
-                    private U key;
-                    public boolean hasNext()
-                    {
-                        return e.hasMoreElements();
-                    }
-
-                    public Entry<U, V> next()
-                    {
-                        key = e.nextElement();
-                        return new KeyEntry(key);
-                    }
-
-                    public void remove()
-                    {
-                        if (key == null)
-                        {
-                            throw new IllegalStateException();
-                        }
-                        dict.remove(key);
-                    }
-                };
-            }
-
-            @Override
-            public int size()
-            {
-                return dict.size();
-            }
-        };
-    }
-
-    @Override
-    public V put(U key, V value) {
-        return dict.put(key, value);
-    }
-
-    class KeyEntry implements Map.Entry<U,V> {
-
-        private final U key;
-
-        KeyEntry(U key) {
-            this.key = key;
-        }
-
-        public U getKey() {
-            return key;
-        }
-
-        public V getValue() {
-            return dict.get(key);
-        }
-
-        public V setValue(V value) {
-            return DictionaryAsMap.this.put(key, value);
-        }
-    }
-
-}
\ No newline at end of file
+public class DictionaryAsMap<K, V> extends AbstractMap<K, V> {
+
+	public DictionaryAsMap(Dictionary<K, V> dictionary) {
+		_dictionary = dictionary;
+	}
+
+	@Override
+	public Set<Entry<K, V>> entrySet() {
+		return new AbstractSet<Entry<K, V>>() {
+
+			@Override
+			public Iterator<Entry<K, V>> iterator() {
+				Enumeration<K> enumeration = _dictionary.keys();
+
+				return new Iterator<Entry<K, V>>() {
+
+					@Override
+					public boolean hasNext() {
+						return enumeration.hasMoreElements();
+					}
+
+					@Override
+					public Entry<K, V> next() {
+						_key = enumeration.nextElement();
+
+						return new KeyEntry(_key);
+					}
+
+					@Override
+					public void remove() {
+						if (_key == null) {
+							throw new IllegalStateException();
+						}
+
+						_dictionary.remove(_key);
+					}
+
+					private K _key;
+
+				};
+			}
+
+			@Override
+			public int size() {
+				return _dictionary.size();
+			}
+
+		};
+	}
+
+	@Override
+	public V put(K key, V value) {
+		return _dictionary.put(key, value);
+	}
+
+	private final Dictionary<K, V> _dictionary;
+
+	private class KeyEntry implements Map.Entry<K, V> {
+
+		public KeyEntry(K key) {
+			_key = key;
+		}
+
+		@Override
+		public K getKey() {
+			return _key;
+		}
+
+		@Override
+		public V getValue() {
+			return _dictionary.get(_key);
+		}
+
+		@Override
+		public V setValue(V value) {
+			return DictionaryAsMap.this.put(_key, value);
+		}
+
+		private final K _key;
+
+	}
+
+}
+/* @generated */
\ No newline at end of file
