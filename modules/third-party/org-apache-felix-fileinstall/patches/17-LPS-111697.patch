diff --git a/org/apache/felix/utils/version/VersionCleaner.java b/org/apache/felix/utils/version/VersionCleaner.java
index 91f14bd..a77a3f8 100644
--- a/org/apache/felix/utils/version/VersionCleaner.java
+++ b/org/apache/felix/utils/version/VersionCleaner.java
@@ -16,6 +16,7 @@
  * specific language governing permissions and limitations
  * under the License.
  */
+
 package org.apache.felix.utils.version;
 
 import java.util.regex.Matcher;
@@ -23,135 +24,136 @@ import java.util.regex.Pattern;
 
 public final class VersionCleaner {
 
-    private VersionCleaner() { }
-
-
-    private static final Pattern FUZZY_VERSION = Pattern.compile("(\\d+)(\\.(\\d+)(\\.(\\d+))?)?([^a-zA-Z0-9](.*))?", Pattern.DOTALL);
-
-    /**
-     * Clean up version parameters. Other builders use more fuzzy definitions of
-     * the version syntax. This method cleans up such a version to match an OSGi
-     * version.
-     *
-     * @param version The version to clean
-     * @return The cleaned version
-     */
-    public static String clean(String version)
-    {
-        if (version == null || version.length() == 0)
-        {
-            return "0.0.0";
-        }
-        String clean = fastSyntax(version);
-        if (clean != null)
-        {
-            return clean;
-        }
-        StringBuffer result = new StringBuffer();
-        Matcher m = FUZZY_VERSION.matcher(version);
-        if (m.matches())
-        {
-            String major = m.group(1);
-            String minor = m.group(3);
-            String micro = m.group(5);
-            String qualifier = m.group(7);
-
-            if (major != null)
-            {
-                result.append(major);
-                if (minor != null)
-                {
-                    result.append(".");
-                    result.append(minor);
-                    if (micro != null)
-                    {
-                        result.append(".");
-                        result.append(micro);
-                        if (qualifier != null)
-                        {
-                            result.append(".");
-                            cleanupModifier(result, qualifier);
-                        }
-                    }
-                    else if (qualifier != null)
-                    {
-                        result.append(".0.");
-                        cleanupModifier(result, qualifier);
-                    }
-                    else
-                    {
-                        result.append(".0");
-                    }
-                }
-                else if (qualifier != null)
-                {
-                    result.append(".0.0.");
-                    cleanupModifier(result, qualifier);
-                }
-                else
-                {
-                    result.append(".0.0");
-                }
-            }
-        }
-        else
-        {
-            result.append("0.0.0.");
-            cleanupModifier(result, version);
-        }
-        return result.toString();
-    }
-
-    private static void cleanupModifier(StringBuffer result, String modifier) {
-        for (int i = 0; i < modifier.length(); i++) {
-            char c = modifier.charAt(i);
-            if ((c >= '0' && c <= '9') || (c >= 'a' && c <= 'z')
-                    || (c >= 'A' && c <= 'Z') || c == '_' || c == '-')
-                result.append(c);
-            else
-                result.append('_');
-        }
-    }
-
-    private static String fastSyntax(String version) {
-        int state = 0;
-        for (int i = 0, l = version.length(); i < l; i++) {
-            char ch = version.charAt(i);
-            switch (state) {
-            case 0:
-            case 2:
-            case 4:
-                if (ch < '0' || ch > '9') {
-                    return null;
-                }
-                state++;
-                break;
-            case 1:
-            case 3:
-            case 5:
-                if (ch == '.') {
-                    state++;
-                } else if (ch < '0' || ch > '9') {
-                    return null;
-                }
-                break;
-            case 6:
-                if (ch == '.') {
-                    return null;
-                }
-                break;
-            }
-        }
-        switch (state) {
-        case 0:
-        case 1:
-            return version + ".0.0";
-        case 2:
-        case 3:
-            return version + ".0";
-        default:
-            return version;
-        }
-    }
+	/**
+	 * Clean up version parameters. Other builders use more fuzzy definitions of
+	 * the version syntax. This method cleans up such a version to match an OSGi
+	 * version.
+	 *
+	 * @param version The version to clean
+	 * @return The cleaned version
+	 */
+	public static String clean(String version) {
+		if ((version == null) || (version.length() == 0)) {
+			return "0.0.0";
+		}
+
+		String clean = _fastSyntax(version);
+
+		if (clean != null) {
+			return clean;
+		}
+
+		StringBuffer result = new StringBuffer();
+
+		Matcher matcher = _fuzzyVersion.matcher(version);
+
+		if (matcher.matches()) {
+			String major = matcher.group(1);
+			String minor = matcher.group(3);
+			String micro = matcher.group(5);
+			String qualifier = matcher.group(7);
+
+			if (major != null) {
+				result.append(major);
+
+				if (minor != null) {
+					result.append(".");
+					result.append(minor);
+
+					if (micro != null) {
+						result.append(".");
+						result.append(micro);
+
+						if (qualifier != null) {
+							result.append(".");
+
+							_cleanupModifier(result, qualifier);
+						}
+					}
+					else if (qualifier != null) {
+						result.append(".0.");
+
+						_cleanupModifier(result, qualifier);
+					}
+					else {
+						result.append(".0");
+					}
+				}
+				else if (qualifier != null) {
+					result.append(".0.0.");
+
+					_cleanupModifier(result, qualifier);
+				}
+				else {
+					result.append(".0.0");
+				}
+			}
+		}
+		else {
+			result.append("0.0.0.");
+
+			_cleanupModifier(result, version);
+		}
+
+		return result.toString();
+	}
+
+	private static void _cleanupModifier(StringBuffer result, String modifier) {
+		for (int i = 0; i < modifier.length(); i++) {
+			char c = modifier.charAt(i);
+
+			if (((c >= '0') && (c <= '9')) || ((c >= 'a') && (c <= 'z')) ||
+				((c >= 'A') && (c <= 'Z')) || (c == '_') || (c == '-')) {
+
+				result.append(c);
+			}
+			else {
+				result.append('_');
+			}
+		}
+	}
+
+	private static String _fastSyntax(String version) {
+		int state = 0;
+
+		for (int i = 0, l = version.length(); i < l; i++) {
+			char c = version.charAt(i);
+
+			if ((state == 0) || (state == 2) || (state == 4)) {
+				if ((c < '0') || (c > '9')) {
+					return null;
+				}
+
+				state++;
+			}
+			else if ((state == 1) || (state == 3) || (state == 5)) {
+				if (c == '.') {
+					state++;
+				}
+				else if ((c < '0') || (c > '9')) {
+					return null;
+				}
+			}
+			else if (state == 6) {
+				if (c == '.') {
+					return null;
+				}
+			}
+		}
+
+		if ((state == 0) || (state == 1)) {
+			return version + ".0.0";
+		}
+		else if ((state == 2) || (state == 3)) {
+			return version + ".0";
+		}
+		else {
+			return version;
+		}
+	}
+
+	private static final Pattern _fuzzyVersion = Pattern.compile(
+		"(\\d+)(\\.(\\d+)(\\.(\\d+))?)?([^a-zA-Z0-9](.*))?", Pattern.DOTALL);
 
 }
+/* @generated */
\ No newline at end of file
diff --git a/org/apache/felix/utils/version/VersionRange.java b/org/apache/felix/utils/version/VersionRange.java
index be4765c..9ea8c67 100644
--- a/org/apache/felix/utils/version/VersionRange.java
+++ b/org/apache/felix/utils/version/VersionRange.java
@@ -6,9 +6,9 @@
  * to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at
- * 
+ *
  *   http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing,
  * software distributed under the License is distributed on an
  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
@@ -16,457 +16,602 @@
  * specific language governing permissions and limitations
  * under the License.
  */
+
 package org.apache.felix.utils.version;
 
 import java.io.Serializable;
 
 import org.osgi.framework.Version;
 
-public class VersionRange implements Serializable
-{
-
-    /**
-     * 
-     */
-    private static final long serialVersionUID = 1L;
-
-    public static final Version INFINITE_VERSION = new Version( Integer.MAX_VALUE, Integer.MAX_VALUE, Integer.MAX_VALUE, "" );
-    public static final VersionRange ANY_VERSION = new VersionRange( false, Version.emptyVersion, INFINITE_VERSION, true );
-
-    public static final int EXACT = 0;
-    public static final int MICRO = 1;
-    public static final int MINOR = 2;
-    public static final int MAJOR = 3;
-    public static final int ANY   = 40;
-
-    private final boolean openFloor;
-    private final Version floor;
-    private final Version ceiling;
-    private final boolean openCeiling;
-
-
-    /**
-     * Interval constructor
-     * 
-     * @param openFloor Whether the lower bound of the range is inclusive (false) or exclusive (true).
-     * @param floor The lower bound version of the range.
-     * @param ceiling The upper bound version of the range.
-     * @param openCeiling Whether the upper bound of the range is inclusive (false) or exclusive (true).
-     */
-    public VersionRange( boolean openFloor, Version floor, Version ceiling, boolean openCeiling )
-    {
-        this.openFloor = openFloor;
-        this.floor = floor;
-        this.ceiling = ceiling;
-        this.openCeiling = openCeiling;
-        checkRange();
-    }
-
-
-    /**
-     * atLeast constructor
-     *
-     * @param atLeast Minimum version
-     */
-    public VersionRange( Version atLeast )
-    {
-        this( atLeast, false );
-    }
-
-    /**
-     * atLeast constructor
-     *
-     * @param atLeast Minimum version
-     * @param exact Exact range
-     */
-    public VersionRange( Version atLeast, boolean exact )
-    {
-
-        this.openFloor = false;
-        this.floor = atLeast;
-        this.ceiling = exact ? atLeast : INFINITE_VERSION;
-        this.openCeiling = exact ? false : true;
-        checkRange();
-    }
-
-
-    public VersionRange( String val ) throws IllegalArgumentException, NumberFormatException
-    {
-        this( val, false );
-    }
-
-    public VersionRange( String val, boolean exact ) throws IllegalArgumentException, NumberFormatException
-    {
-        this( val, exact, true );
-    }
-
-    public VersionRange( String val, boolean exact, boolean clean ) throws IllegalArgumentException, NumberFormatException
-    {
-        val = removeQuotesAndWhitespaces(val);
-        int fst = val.charAt( 0 );
-        if ( fst == '[' )
-        {
-            openFloor = false;
-        }
-        else if ( fst == '(' )
-        {
-            openFloor = true;
-        }
-        else
-        {
-            openFloor = false;
-            floor = VersionTable.getVersion( val, clean );
-            ceiling = exact ? floor : INFINITE_VERSION;
-            openCeiling = exact ? false : true;
-            return;
-        }
-
-        int lst = val.charAt( val.length() - 1 );
-        if ( lst == ']' )
-        {
-            openCeiling = false;
-        }
-        else if ( lst == ')' )
-        {
-            openCeiling = true;
-        }
-        else
-        {
-            throw new IllegalArgumentException( "illegal version range syntax " + val
-                + ": range must end in ')' or ']'" );
-        }
-
-        int comma = val.indexOf( ',' );
-        if ( comma < 0 )
-        {
-            throw new IllegalArgumentException( "illegal version range syntax " + "no comma" );
-        }
-        if ( val.indexOf( ',', comma + 1 ) > 0 )
-        {
-            throw new IllegalArgumentException( "illegal version range syntax " + "too many commas" );
-        }
-        String strFloor = val.substring( 1, comma );
-        String strCeil = val.substring( comma + 1, val.length() - 1 );
-        floor = VersionTable.getVersion( strFloor, clean );
-        ceiling = "*".equals( strCeil ) ? INFINITE_VERSION : VersionTable.getVersion( strCeil, clean );
-        checkRange();
-    }
-
-    private String removeQuotesAndWhitespaces(String val) {
-        for (int i = 0, l = val.length(); i < l; i++) {
-            char ch = val.charAt(i);
-            if (isRemoveable(ch)) {
-                StringBuilder sb = new StringBuilder(l);
-                sb.append(val, 0, i);
-                for (i++; i < l; i++) {
-                    ch = val.charAt(i);
-                    if (!isRemoveable(ch)) {
-                        sb.append(ch);
-                    }
-                }
-                return sb.toString();
-            }
-        }
-        return val;
-    }
-
-    private static boolean[] removeable;
-    static {
-        removeable = new boolean[256];
-        for (int i = 0; i < 256; i++) {
-            removeable[i] = Character.isWhitespace(i);
-        }
-        removeable['"'] = true;
-    }
-
-    private boolean isRemoveable(char ch) {
-        return ch < 256 ? removeable[ch] : Character.isWhitespace(ch);
-    }
-
-    public static VersionRange parseVersionRange( String val ) throws IllegalArgumentException, NumberFormatException
-    {
-        if ( val == null || val.trim().length() == 0 )
-        {
-            return ANY_VERSION;
-        }
-
-        return new VersionRange( val );
-    }
-
-
-    public Version getCeiling()
-    {
-        return ceiling;
-    }
-
-
-    public Version getFloor()
-    {
-        return floor;
-    }
-
-
-    public boolean isOpenCeiling()
-    {
-        return openCeiling;
-    }
-
-
-    public boolean isOpenFloor()
-    {
-        return openFloor;
-    }
-
-
-    public boolean isPointVersion()
-    {
-        return !openFloor && !openCeiling && floor.equals( ceiling );
-    }
-
-
-    /**
-     * test a version to see if it falls in the range
-     * 
-     * @param version The version to check
-     * @return Whether the version is within the range
-     */
-    public boolean contains( Version version )
-    {
-        if ( version.equals( INFINITE_VERSION ) )
-        {
-            return ceiling.equals( INFINITE_VERSION );
-        }
-        else
-        {
-            return ( version.compareTo( floor ) > 0 && version.compareTo( ceiling ) < 0 )
-                || ( !openFloor && version.equals( floor ) ) || ( !openCeiling && version.equals( ceiling ) );
-        }
-    }
-
-    /*
-    * (non-Javadoc)
-    *
-    * @see org.apache.aries.application.impl.VersionRange#intersect(VersionRange
-    * range)
-    */
-
-    public VersionRange intersect(VersionRange r)
-    {
-        // Use the highest minimum version.
-        final Version newFloor;
-        final boolean newOpenFloor;
-        int minCompare = floor.compareTo(r.getFloor());
-        if (minCompare > 0)
-        {
-            newFloor = floor;
-            newOpenFloor = openFloor;
-        }
-        else if (minCompare < 0)
-        {
-            newFloor = r.getFloor();
-            newOpenFloor = r.isOpenFloor();
-        }
-        else
-        {
-            newFloor = floor;
-            newOpenFloor = (openFloor || r.isOpenFloor());
-        }
-
-        // Use the lowest maximum version.
-        final Version newCeiling;
-        final boolean newOpenCeiling;
-        // null maximum version means unbounded, so the highest possible value.
-        int maxCompare = ceiling.compareTo(r.getCeiling());
-        if (maxCompare < 0)
-        {
-            newCeiling = ceiling;
-            newOpenCeiling = openCeiling;
-        }
-        else if (maxCompare > 0)
-        {
-            newCeiling = r.getCeiling();
-            newOpenCeiling = r.isOpenCeiling();
-        }
-        else
-        {
-            newCeiling = ceiling;
-            newOpenCeiling = (openCeiling || r.isOpenCeiling());
-        }
-
-        VersionRange result;
-        if (isRangeValid(newOpenFloor, newFloor, newCeiling, newOpenCeiling))
-        {
-            result = new VersionRange(newOpenFloor, newFloor, newCeiling, newOpenCeiling);
-        }
-        else
-        {
-            result = null;
-        }
-        return result;
-    }
-
-    /**
-     * Check if the supplied parameters describe a valid version range.
-     *
-     * @param floor
-     *          the minimum version.
-     * @param openFloor
-     *          whether the minimum version is exclusive.
-     * @param ceiling
-     *          the maximum version.
-     * @param openCeiling
-     *          whether the maximum version is exclusive.
-     * @return true is the range is valid; otherwise false.
-     */
-    private static boolean isRangeValid(boolean openFloor, Version floor, Version ceiling, boolean openCeiling) {
-        boolean result;
-        int compare = floor.compareTo(ceiling);
-        if (compare > 0)
-        {
-            // Minimum larger than maximum is invalid.
-            result = false;
-        }
-        else if (compare == 0 && (openFloor || openCeiling))
-        {
-            // If floor and ceiling are the same, and either are exclusive, no valid range
-            // exists.
-            result = false;
-        }
-        else
-        {
-            // Range is valid.
-            result = true;
-        }
-        return result;
-    }
-
-    private void checkRange()
-    {
-        if (!isRangeValid(openFloor, floor, ceiling, openCeiling))
-        {
-            throw new IllegalArgumentException("invalid version range: " + makeString(openFloor, floor, ceiling, openCeiling));
-        }
-    }
-
-
-    public int hashCode()
-    {
-        final int prime = 31;
-        int result = 1;
-        result = prime * result + ( ( ceiling == null ) ? 0 : ceiling.hashCode() );
-        result = prime * result + ( ( floor == null ) ? 0 : floor.hashCode() );
-        result = prime * result + ( openCeiling ? 1231 : 1237 );
-        result = prime * result + ( openFloor ? 1231 : 1237 );
-        return result;
-    }
-
-
-    public boolean equals( Object obj )
-    {
-        if ( this == obj )
-            return true;
-        if ( obj == null )
-            return false;
-        if ( getClass() != obj.getClass() )
-            return false;
-        final VersionRange other = ( VersionRange ) obj;
-        if ( ceiling == null )
-        {
-            if ( other.ceiling != null )
-                return false;
-        }
-        else if ( !ceiling.equals( other.ceiling ) )
-            return false;
-        if ( floor == null )
-        {
-            if ( other.floor != null )
-                return false;
-        }
-        else if ( !floor.equals( other.floor ) )
-            return false;
-        if ( openCeiling != other.openCeiling )
-            return false;
-        if ( openFloor != other.openFloor )
-            return false;
-        return true;
-    }
-
-
-    public String toString()
-    {
-        if ( ANY_VERSION.equals( this ) )
-        {
-            return makeString( openFloor, Version.emptyVersion, INFINITE_VERSION, openCeiling );
-        }
-        return makeString( openFloor, floor, ceiling, openCeiling );
-    }
-
-
-    private String makeString( boolean openFloor, Version floor, Version ceiling, boolean openCeiling )
-    {
-        StringBuffer vr = new StringBuffer( 32 );
-        if ( INFINITE_VERSION.equals( ceiling ) )
-        {
-            vr.append( Version.emptyVersion.equals( floor ) ? "0" : floor.toString() );
-        }
-        else
-        {
-            vr.append( openFloor ? "(" : "[" );
-            String floorStr = Version.emptyVersion.equals( floor ) ? "0" : floor.toString();
-            String ceilingStr = ceiling.toString();
-            vr.append( floorStr ).append( "," ).append( ceilingStr );
-            vr.append( openCeiling ? ")" : "]" );
-        }
-        return vr.toString();
-    }
-
-
-    public static VersionRange newInstance( Version pointVersion,
-                                            int lowerBoundRule,
-                                            int upperBoundRule )
-    {
-        Version floor = null;
-        switch ( lowerBoundRule )
-        {
-            case ANY:
-                floor = VersionTable.getVersion( 0, 0, 0 );
-                break;
-            case MAJOR:
-                floor = VersionTable.getVersion( pointVersion.getMajor(), 0, 0 );
-                break;
-            case MINOR:
-                floor = VersionTable.getVersion( pointVersion.getMajor(), pointVersion.getMinor(), 0 );
-                break;
-            case MICRO:
-                floor = VersionTable.getVersion( pointVersion.getMajor(), pointVersion.getMinor(), pointVersion.getMicro() );
-                break;
-            case EXACT:
-                floor = pointVersion;
-                break;
-        }
-
-        Version ceiling = null;
-        boolean openCeiling = true;
-        switch ( upperBoundRule )
-        {
-            case ANY:
-                ceiling = INFINITE_VERSION;
-                break;
-            case MAJOR:
-                ceiling = VersionTable.getVersion( pointVersion.getMajor() + 1, 0, 0 );
-                break;
-            case MINOR:
-                ceiling = VersionTable.getVersion( pointVersion.getMajor(), pointVersion.getMinor() + 1, 0 );
-                break;
-            case MICRO:
-                ceiling = VersionTable.getVersion( pointVersion.getMajor(), pointVersion.getMinor(), pointVersion.getMicro() + 1 );
-                break;
-            case EXACT:
-                ceiling = pointVersion;
-                openCeiling = false;
-                break;
-        }
-
-        return new VersionRange( false, floor, ceiling, openCeiling );
-    }
+public class VersionRange implements Serializable {
+
+	public static final int ANY = 40;
+
+	public static final VersionRange ANY_VERSION;
+
+	public static final int EXACT = 0;
+
+	public static final Version INFINITE_VERSION;
+
+	public static final int MAJOR = 3;
+
+	public static final int MICRO = 1;
+
+	public static final int MINOR = 2;
+
+	public static VersionRange newInstance(
+		Version pointVersion, int lowerBoundRule, int upperBoundRule) {
+
+		Version floor = null;
+
+		if (lowerBoundRule == ANY) {
+			floor = VersionTable.getVersion(0, 0, 0);
+		}
+		else if (lowerBoundRule == MAJOR) {
+			floor = VersionTable.getVersion(pointVersion.getMajor(), 0, 0);
+		}
+		else if (lowerBoundRule == MINOR) {
+			floor = VersionTable.getVersion(
+				pointVersion.getMajor(), pointVersion.getMinor(), 0);
+		}
+		else if (lowerBoundRule == MICRO) {
+			floor = VersionTable.getVersion(
+				pointVersion.getMajor(), pointVersion.getMinor(),
+				pointVersion.getMicro());
+		}
+		else if (lowerBoundRule == EXACT) {
+			floor = pointVersion;
+		}
+
+		Version ceiling = null;
+
+		boolean openCeiling = true;
+
+		if (upperBoundRule == ANY) {
+			ceiling = INFINITE_VERSION;
+		}
+		else if (upperBoundRule == MAJOR) {
+			ceiling = VersionTable.getVersion(
+				pointVersion.getMajor() + 1, 0, 0);
+		}
+		else if (upperBoundRule == MINOR) {
+			ceiling = VersionTable.getVersion(
+				pointVersion.getMajor(), pointVersion.getMinor() + 1, 0);
+		}
+		else if (upperBoundRule == MICRO) {
+			ceiling = VersionTable.getVersion(
+				pointVersion.getMajor(), pointVersion.getMinor(),
+				pointVersion.getMicro() + 1);
+		}
+		else if (upperBoundRule == EXACT) {
+			ceiling = pointVersion;
+			openCeiling = false;
+		}
+
+		return new VersionRange(false, floor, ceiling, openCeiling);
+	}
+
+	public static VersionRange parseVersionRange(String string)
+		throws IllegalArgumentException, NumberFormatException {
+
+		if (string == null) {
+			return ANY_VERSION;
+		}
+
+		string = string.trim();
+
+		if (string.length() == 0) {
+			return ANY_VERSION;
+		}
+
+		return new VersionRange(string);
+	}
+
+	/**
+	 * Interval constructor
+	 *
+	 * @param openFloor Whether the lower bound of the range is inclusive (false) or exclusive (true).
+	 * @param floor The lower bound version of the range.
+	 * @param ceiling The upper bound version of the range.
+	 * @param openCeiling Whether the upper bound of the range is inclusive (false) or exclusive (true).
+	 */
+	public VersionRange(
+		boolean openFloor, Version floor, Version ceiling,
+		boolean openCeiling) {
+
+		_openFloor = openFloor;
+		_floor = floor;
+		_ceiling = ceiling;
+		_openCeiling = openCeiling;
+
+		_checkRange();
+	}
+
+	public VersionRange(String value)
+		throws IllegalArgumentException, NumberFormatException {
+
+		this(value, false);
+	}
+
+	public VersionRange(String value, boolean exact)
+		throws IllegalArgumentException, NumberFormatException {
+
+		this(value, exact, true);
+	}
+
+	public VersionRange(String value, boolean exact, boolean clean)
+		throws IllegalArgumentException, NumberFormatException {
+
+		value = _removeQuotesAndWhitespaces(value);
+
+		int first = value.charAt(0);
+
+		if (first == '[') {
+			_openFloor = false;
+		}
+		else if (first == '(') {
+			_openFloor = true;
+		}
+		else {
+			_openFloor = false;
+
+			_floor = VersionTable.getVersion(value, clean);
+
+			if (exact) {
+				_ceiling = _floor;
+
+				_openCeiling = false;
+			}
+			else {
+				_ceiling = INFINITE_VERSION;
+
+				_openCeiling = true;
+			}
+
+			return;
+		}
+
+		int last = value.charAt(value.length() - 1);
+
+		if (last == ']') {
+			_openCeiling = false;
+		}
+		else if (last == ')') {
+			_openCeiling = true;
+		}
+		else {
+			throw new IllegalArgumentException(
+				"Illegal version range syntax " + value +
+					": range must end in ')' or ']'");
+		}
+
+		int comma = value.indexOf(',');
+
+		if (comma == -1) {
+			throw new IllegalArgumentException(
+				"Illegal version range syntax no comma");
+		}
+
+		if (value.indexOf(',', comma + 1) > 0) {
+			throw new IllegalArgumentException(
+				"Illegal version range syntax too many commas");
+		}
+
+		String floor = value.substring(1, comma);
+
+		String ceiling = value.substring(comma + 1, value.length() - 1);
+
+		_floor = VersionTable.getVersion(floor, clean);
+
+		if (ceiling.equals("*")) {
+			_ceiling = INFINITE_VERSION;
+		}
+		else {
+			_ceiling = VersionTable.getVersion(ceiling, clean);
+		}
+
+		_checkRange();
+	}
+
+	public VersionRange(Version atLeast) {
+		this(atLeast, false);
+	}
+
+	/**
+	 * atLeast constructor
+	 *
+	 * @param atLeast Minimum version
+	 * @param exact Exact range
+	 */
+	public VersionRange(Version atLeast, boolean exact) {
+		_openFloor = false;
+		_floor = atLeast;
+
+		if (exact) {
+			_ceiling = atLeast;
+		}
+		else {
+			_ceiling = INFINITE_VERSION;
+		}
+
+		if (exact) {
+			_openCeiling = false;
+		}
+		else {
+			_openCeiling = true;
+		}
+
+		_checkRange();
+	}
+
+	/**
+	 * test a version to see if it falls in the range
+	 *
+	 * @param version The version to check
+	 * @return Whether the version is within the range
+	 */
+	public boolean contains(Version version) {
+		if (version.equals(INFINITE_VERSION)) {
+			if (_ceiling.equals(INFINITE_VERSION)) {
+				return true;
+			}
+
+			return false;
+		}
+
+		if (((version.compareTo(_floor) > 0) &&
+			 (version.compareTo(_ceiling) < 0)) ||
+			(!_openFloor && version.equals(_floor)) ||
+			(!_openCeiling && version.equals(_ceiling))) {
+
+			return true;
+		}
+
+		return false;
+	}
+
+	@Override
+	public boolean equals(Object object) {
+		if (this == object) {
+			return true;
+		}
+
+		if (object == null) {
+			return false;
+		}
+
+		if (getClass() != object.getClass()) {
+			return false;
+		}
+
+		VersionRange versionRange = (VersionRange)object;
+
+		Version ceiling = versionRange.getCeiling();
+
+		if (_ceiling == null) {
+			if (ceiling != null)
+
+				return false;
+		}
+		else if (!_ceiling.equals(ceiling)) {
+			return false;
+		}
+
+		Version floor = versionRange.getFloor();
+
+		if (_floor == null) {
+			if (floor != null)
+
+				return false;
+		}
+		else if (!_floor.equals(floor)) {
+			return false;
+		}
+
+		if (_openCeiling != versionRange.isOpenCeiling()) {
+			return false;
+		}
+
+		if (_openFloor != versionRange.isOpenFloor()) {
+			return false;
+		}
+
+		return true;
+	}
+
+	public Version getCeiling() {
+		return _ceiling;
+	}
+
+	public Version getFloor() {
+		return _floor;
+	}
+
+	@Override
+	public int hashCode() {
+		int prime = 31;
+
+		int result = 1;
+
+		if (_ceiling == null) {
+			result = prime * result;
+		}
+		else {
+			result = prime * result + _ceiling.hashCode();
+		}
+
+		if (_floor == null) {
+			result = prime * result;
+		}
+		else {
+			result = prime * result + _floor.hashCode();
+		}
+
+		if (_openCeiling) {
+			result = prime * result + 1231;
+		}
+		else {
+			result = prime * result + 1237;
+		}
+
+		if (_openFloor) {
+			result = prime * result + 1231;
+		}
+		else {
+			result = prime * result + 1237;
+		}
+
+		return result;
+	}
+
+	public VersionRange intersect(VersionRange versionRange) {
+
+		// Use the highest minimum version.
+
+		Version newFloor = null;
+
+		boolean newOpenFloor = false;
+
+		int minCompare = _floor.compareTo(versionRange.getFloor());
+
+		if (minCompare > 0) {
+			newFloor = _floor;
+
+			newOpenFloor = _openFloor;
+		}
+		else if (minCompare < 0) {
+			newFloor = versionRange.getFloor();
+
+			newOpenFloor = versionRange.isOpenFloor();
+		}
+		else {
+			newFloor = _floor;
+
+			if (_openFloor || versionRange.isOpenFloor()) {
+				newOpenFloor = true;
+			}
+			else {
+				newOpenFloor = false;
+			}
+		}
+
+		// Use the lowest maximum version.
+
+		Version newCeiling = null;
+		boolean newOpenCeiling = false;
+
+		// null maximum version means unbounded, so the highest possible value.
+
+		int maxCompare = _ceiling.compareTo(versionRange.getCeiling());
+
+		if (maxCompare < 0) {
+			newCeiling = _ceiling;
+
+			newOpenCeiling = _openCeiling;
+		}
+		else if (maxCompare > 0) {
+			newCeiling = versionRange.getCeiling();
+
+			newOpenCeiling = versionRange.isOpenCeiling();
+		}
+		else {
+			newCeiling = _ceiling;
+
+			if (_openCeiling || versionRange.isOpenCeiling()) {
+				newOpenCeiling = true;
+			}
+			else {
+				newOpenCeiling = false;
+			}
+		}
+
+		VersionRange result = null;
+
+		if (_isRangeValid(newOpenFloor, newFloor, newCeiling, newOpenCeiling)) {
+			result = new VersionRange(
+				newOpenFloor, newFloor, newCeiling, newOpenCeiling);
+		}
+
+		return result;
+	}
+
+	public boolean isOpenCeiling() {
+		return _openCeiling;
+	}
+
+	public boolean isOpenFloor() {
+		return _openFloor;
+	}
+
+	public boolean isPointVersion() {
+		if (!_openFloor && !_openCeiling && _floor.equals(_ceiling)) {
+			return true;
+		}
+
+		return false;
+	}
+
+	public String toString() {
+		if (ANY_VERSION.equals(this)) {
+			return _makeString(
+				_openFloor, Version.emptyVersion, INFINITE_VERSION,
+				_openCeiling);
+		}
+
+		return _makeString(_openFloor, _floor, _ceiling, _openCeiling);
+	}
+
+	/**
+	 * Check if the supplied parameters describe a valid version range.
+	 *
+	 * @param floor
+	 *		  the minimum version.
+	 * @param openFloor
+	 *		  whether the minimum version is exclusive.
+	 * @param ceiling
+	 *		  the maximum version.
+	 * @param openCeiling
+	 *		  whether the maximum version is exclusive.
+	 * @return true is the range is valid; otherwise false.
+	 */
+	private static boolean _isRangeValid(
+		boolean openFloor, Version floor, Version ceiling,
+		boolean openCeiling) {
+
+		boolean result = false;
+
+		int compare = floor.compareTo(ceiling);
+
+		if (compare > 0) {
+
+			// Minimum larger than maximum is invalid.
+
+			result = false;
+		}
+		else if ((compare == 0) && (openFloor || openCeiling)) {
+
+			// If floor and ceiling are the same, and either are exclusive,
+			// no valid range exists.
+
+			result = false;
+		}
+		else {
+
+			// Range is valid.
+
+			result = true;
+		}
+
+		return result;
+	}
+
+	private void _checkRange() {
+		if (!_isRangeValid(_openFloor, _floor, _ceiling, _openCeiling)) {
+			throw new IllegalArgumentException(
+				"Invalid version range: " +
+					_makeString(_openFloor, _floor, _ceiling, _openCeiling));
+		}
+	}
+
+	private boolean _isRemoveable(char c) {
+		if (c < 256) {
+			return _removeable[c];
+		}
+
+		return Character.isWhitespace(c);
+	}
+
+	private String _makeString(
+		boolean openFloor, Version floor, Version ceiling,
+		boolean openCeiling) {
+
+		StringBuffer sb = new StringBuffer(32);
+
+		if (INFINITE_VERSION.equals(ceiling)) {
+			if (Version.emptyVersion.equals(floor)) {
+				sb.append("0");
+			}
+			else {
+				sb.append(floor.toString());
+			}
+		}
+		else {
+			if (openFloor) {
+				sb.append("(");
+			}
+			else {
+				sb.append("[");
+			}
+
+			if (Version.emptyVersion.equals(floor)) {
+				sb.append("0");
+			}
+			else {
+				sb.append(floor.toString());
+			}
+
+			sb.append(",");
+
+			if (openCeiling) {
+				sb.append(")");
+			}
+			else {
+				sb.append("]");
+			}
+		}
+
+		return sb.toString();
+	}
+
+	private String _removeQuotesAndWhitespaces(String value) {
+		int length = value.length();
+
+		for (int i = 0; i < length; i++) {
+			char c = value.charAt(i);
+
+			if (_isRemoveable(c)) {
+				StringBuilder sb = new StringBuilder(length);
+
+				sb.append(value, 0, i);
+
+				for (i++; i < length; i++) {
+					c = value.charAt(i);
+
+					if (!_isRemoveable(c)) {
+						sb.append(c);
+					}
+				}
+
+				return sb.toString();
+			}
+		}
+
+		return value;
+	}
+
+	private static boolean[] _removeable;
+	private static final long serialVersionUID = 1L;
+
+	static {
+		_removeable = new boolean[256];
+
+		for (int i = 0; i < 256; i++) {
+			_removeable[i] = Character.isWhitespace(i);
+		}
+
+		_removeable['"'] = true;
+
+		INFINITE_VERSION = new Version(
+			Integer.MAX_VALUE, Integer.MAX_VALUE, Integer.MAX_VALUE, "");
+
+		ANY_VERSION = new VersionRange(
+			false, Version.emptyVersion, VersionRange.INFINITE_VERSION, true);
+	}
+
+	private final Version _ceiling;
+	private final Version _floor;
+	private final boolean _openCeiling;
+	private final boolean _openFloor;
+
 }
+/* @generated */
\ No newline at end of file
diff --git a/org/apache/felix/utils/version/VersionTable.java b/org/apache/felix/utils/version/VersionTable.java
index d836b8b..a4edae5 100644
--- a/org/apache/felix/utils/version/VersionTable.java
+++ b/org/apache/felix/utils/version/VersionTable.java
@@ -6,9 +6,9 @@
  * to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at
- * 
+ *
  *   http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing,
  * software distributed under the License is distributed on an
  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
@@ -16,6 +16,7 @@
  * specific language governing permissions and limitations
  * under the License.
  */
+
 package org.apache.felix.utils.version;
 
 import java.util.WeakHashMap;
@@ -24,68 +25,66 @@ import org.osgi.framework.Version;
 
 /**
  * Cache of Versions backed by a WeakHashMap to conserve memory.
- * 
+ *
  * VersionTable.getVersion should be used in preference to new Version() or Version.parseVersion.
- * 
- * @author dave
  *
+ * @author dave
  */
-public final class VersionTable
-{
-    private static final WeakHashMap versions = new WeakHashMap();
-
-    private VersionTable() { }
-    
-    public static Version getVersion(String version)
-    {
-        return getVersion( version, true );
-    }
-
-    public static Version getVersion(String version, boolean clean)
-    {
-        if (clean)
-        {
-            version = VersionCleaner.clean(version);
-        }
-        synchronized( versions )
-        {
-            Version v = (Version) versions.get(version);
-            if ( v == null )
-            {
-                v = Version.parseVersion(version);
-                versions.put(version, v);
-            }
-            return v;
-        }
-    }
-
-    public static Version getVersion(int major, int minor, int micro)
-    {
-        return getVersion(major, minor, micro, null);
-    }
-
-    public static Version getVersion(int major, int minor, int micro, String qualifier)
-    {
-        String key;
-        
-        if ( qualifier == null || qualifier.length() == 0 )
-        {
-            key = major + "." + minor + "." + micro;
-        }
-        else
-        {
-            key = major + "." + minor + "." + micro + "." + qualifier;            
-        }
-        
-        synchronized( versions )
-        {
-            Version v = (Version) versions.get(key);
-            if ( v == null )
-            {
-                v = new Version(major, minor, micro, qualifier);
-                versions.put(key, v);
-            }
-            return v;
-        }
-    }
+public final class VersionTable {
+
+	public static Version getVersion(int major, int minor, int micro) {
+		return getVersion(major, minor, micro, null);
+	}
+
+	public static Version getVersion(
+		int major, int minor, int micro, String qualifier) {
+
+		String key = major + "." + minor + "." + micro;
+
+		if ((qualifier != null) && (qualifier.length() != 0)) {
+			key = key + "." + qualifier;
+		}
+
+		synchronized (_versions) {
+			Version version = (Version)_versions.get(key);
+
+			if (version == null) {
+				version = new Version(major, minor, micro, qualifier);
+
+				_versions.put(key, version);
+			}
+
+			return version;
+		}
+	}
+
+	public static Version getVersion(String version) {
+		return getVersion(version, true);
+	}
+
+	public static Version getVersion(String versionString, boolean clean) {
+		if (clean) {
+			versionString = VersionCleaner.clean(versionString);
+		}
+
+		synchronized (_versions) {
+			Version version = (Version)_versions.get(versionString);
+
+			if (version == null) {
+				version = Version.parseVersion(versionString);
+
+				_versions.put(versionString, version);
+			}
+
+			return version;
+		}
+	}
+
+	private VersionTable() {
+	}
+
+	private static final WeakHashMap<String, Version> _versions =
+		new WeakHashMap<>();
+
 }
+/* @generated */
\ No newline at end of file
