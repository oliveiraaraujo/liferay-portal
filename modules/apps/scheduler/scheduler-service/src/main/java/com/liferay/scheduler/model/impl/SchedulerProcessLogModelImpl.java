/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.scheduler.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.scheduler.model.SchedulerProcessLog;
import com.liferay.scheduler.model.SchedulerProcessLogModel;
import com.liferay.scheduler.model.SchedulerProcessLogSoap;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the SchedulerProcessLog service. Represents a row in the &quot;SchedulerProcessLog&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface </code>SchedulerProcessLogModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link SchedulerProcessLogImpl}.
 * </p>
 *
 * @author Alessio Antonio Rendina
 * @see SchedulerProcessLogImpl
 * @generated
 */
@JSON(strict = true)
public class SchedulerProcessLogModelImpl
	extends BaseModelImpl<SchedulerProcessLog>
	implements SchedulerProcessLogModel {

	/**
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a scheduler process log model instance should use the <code>SchedulerProcessLog</code> interface instead.
	 */
	public static final String TABLE_NAME = "SchedulerProcessLog";

	public static final Object[][] TABLE_COLUMNS = {
		{"mvccVersion", Types.BIGINT}, {"schedulerProcessLogId", Types.BIGINT},
		{"companyId", Types.BIGINT}, {"userId", Types.BIGINT},
		{"userName", Types.VARCHAR}, {"createDate", Types.TIMESTAMP},
		{"modifiedDate", Types.TIMESTAMP}, {"schedulerProcessId", Types.BIGINT},
		{"error", Types.VARCHAR}, {"output_", Types.VARCHAR},
		{"startDate", Types.TIMESTAMP}, {"endDate", Types.TIMESTAMP},
		{"status", Types.INTEGER}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("mvccVersion", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("schedulerProcessLogId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("schedulerProcessId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("error", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("output_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("startDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("endDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("status", Types.INTEGER);
	}

	public static final String TABLE_SQL_CREATE =
		"create table SchedulerProcessLog (mvccVersion LONG default 0 not null,schedulerProcessLogId LONG not null primary key,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,schedulerProcessId LONG,error VARCHAR(75) null,output_ VARCHAR(75) null,startDate DATE null,endDate DATE null,status INTEGER)";

	public static final String TABLE_SQL_DROP =
		"drop table SchedulerProcessLog";

	public static final String ORDER_BY_JPQL =
		" ORDER BY schedulerProcessLog.modifiedDate DESC";

	public static final String ORDER_BY_SQL =
		" ORDER BY SchedulerProcessLog.modifiedDate DESC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final long SCHEDULERPROCESSID_COLUMN_BITMASK = 1L;

	public static final long STATUS_COLUMN_BITMASK = 2L;

	public static final long MODIFIEDDATE_COLUMN_BITMASK = 4L;

	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
		_entityCacheEnabled = entityCacheEnabled;
	}

	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
		_finderCacheEnabled = finderCacheEnabled;
	}

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static SchedulerProcessLog toModel(
		SchedulerProcessLogSoap soapModel) {

		if (soapModel == null) {
			return null;
		}

		SchedulerProcessLog model = new SchedulerProcessLogImpl();

		model.setMvccVersion(soapModel.getMvccVersion());
		model.setSchedulerProcessLogId(soapModel.getSchedulerProcessLogId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setSchedulerProcessId(soapModel.getSchedulerProcessId());
		model.setError(soapModel.getError());
		model.setOutput(soapModel.getOutput());
		model.setStartDate(soapModel.getStartDate());
		model.setEndDate(soapModel.getEndDate());
		model.setStatus(soapModel.getStatus());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<SchedulerProcessLog> toModels(
		SchedulerProcessLogSoap[] soapModels) {

		if (soapModels == null) {
			return null;
		}

		List<SchedulerProcessLog> models = new ArrayList<SchedulerProcessLog>(
			soapModels.length);

		for (SchedulerProcessLogSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public SchedulerProcessLogModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _schedulerProcessLogId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setSchedulerProcessLogId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _schedulerProcessLogId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return SchedulerProcessLog.class;
	}

	@Override
	public String getModelClassName() {
		return SchedulerProcessLog.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<SchedulerProcessLog, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<SchedulerProcessLog, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<SchedulerProcessLog, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((SchedulerProcessLog)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<SchedulerProcessLog, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<SchedulerProcessLog, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(SchedulerProcessLog)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<SchedulerProcessLog, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<SchedulerProcessLog, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, SchedulerProcessLog>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			SchedulerProcessLog.class.getClassLoader(),
			SchedulerProcessLog.class, ModelWrapper.class);

		try {
			Constructor<SchedulerProcessLog> constructor =
				(Constructor<SchedulerProcessLog>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException roe) {
					throw new InternalError(roe);
				}
			};
		}
		catch (NoSuchMethodException nsme) {
			throw new InternalError(nsme);
		}
	}

	private static final Map<String, Function<SchedulerProcessLog, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<SchedulerProcessLog, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<SchedulerProcessLog, Object>>
			attributeGetterFunctions =
				new LinkedHashMap
					<String, Function<SchedulerProcessLog, Object>>();
		Map<String, BiConsumer<SchedulerProcessLog, ?>>
			attributeSetterBiConsumers =
				new LinkedHashMap<String, BiConsumer<SchedulerProcessLog, ?>>();

		attributeGetterFunctions.put(
			"mvccVersion", SchedulerProcessLog::getMvccVersion);
		attributeSetterBiConsumers.put(
			"mvccVersion",
			(BiConsumer<SchedulerProcessLog, Long>)
				SchedulerProcessLog::setMvccVersion);
		attributeGetterFunctions.put(
			"schedulerProcessLogId",
			SchedulerProcessLog::getSchedulerProcessLogId);
		attributeSetterBiConsumers.put(
			"schedulerProcessLogId",
			(BiConsumer<SchedulerProcessLog, Long>)
				SchedulerProcessLog::setSchedulerProcessLogId);
		attributeGetterFunctions.put(
			"companyId", SchedulerProcessLog::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId",
			(BiConsumer<SchedulerProcessLog, Long>)
				SchedulerProcessLog::setCompanyId);
		attributeGetterFunctions.put("userId", SchedulerProcessLog::getUserId);
		attributeSetterBiConsumers.put(
			"userId",
			(BiConsumer<SchedulerProcessLog, Long>)
				SchedulerProcessLog::setUserId);
		attributeGetterFunctions.put(
			"userName", SchedulerProcessLog::getUserName);
		attributeSetterBiConsumers.put(
			"userName",
			(BiConsumer<SchedulerProcessLog, String>)
				SchedulerProcessLog::setUserName);
		attributeGetterFunctions.put(
			"createDate", SchedulerProcessLog::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate",
			(BiConsumer<SchedulerProcessLog, Date>)
				SchedulerProcessLog::setCreateDate);
		attributeGetterFunctions.put(
			"modifiedDate", SchedulerProcessLog::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate",
			(BiConsumer<SchedulerProcessLog, Date>)
				SchedulerProcessLog::setModifiedDate);
		attributeGetterFunctions.put(
			"schedulerProcessId", SchedulerProcessLog::getSchedulerProcessId);
		attributeSetterBiConsumers.put(
			"schedulerProcessId",
			(BiConsumer<SchedulerProcessLog, Long>)
				SchedulerProcessLog::setSchedulerProcessId);
		attributeGetterFunctions.put("error", SchedulerProcessLog::getError);
		attributeSetterBiConsumers.put(
			"error",
			(BiConsumer<SchedulerProcessLog, String>)
				SchedulerProcessLog::setError);
		attributeGetterFunctions.put("output", SchedulerProcessLog::getOutput);
		attributeSetterBiConsumers.put(
			"output",
			(BiConsumer<SchedulerProcessLog, String>)
				SchedulerProcessLog::setOutput);
		attributeGetterFunctions.put(
			"startDate", SchedulerProcessLog::getStartDate);
		attributeSetterBiConsumers.put(
			"startDate",
			(BiConsumer<SchedulerProcessLog, Date>)
				SchedulerProcessLog::setStartDate);
		attributeGetterFunctions.put(
			"endDate", SchedulerProcessLog::getEndDate);
		attributeSetterBiConsumers.put(
			"endDate",
			(BiConsumer<SchedulerProcessLog, Date>)
				SchedulerProcessLog::setEndDate);
		attributeGetterFunctions.put("status", SchedulerProcessLog::getStatus);
		attributeSetterBiConsumers.put(
			"status",
			(BiConsumer<SchedulerProcessLog, Integer>)
				SchedulerProcessLog::setStatus);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public long getMvccVersion() {
		return _mvccVersion;
	}

	@Override
	public void setMvccVersion(long mvccVersion) {
		_mvccVersion = mvccVersion;
	}

	@JSON
	@Override
	public long getSchedulerProcessLogId() {
		return _schedulerProcessLogId;
	}

	@Override
	public void setSchedulerProcessLogId(long schedulerProcessLogId) {
		_schedulerProcessLogId = schedulerProcessLogId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_columnBitmask = -1L;

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public long getSchedulerProcessId() {
		return _schedulerProcessId;
	}

	@Override
	public void setSchedulerProcessId(long schedulerProcessId) {
		_columnBitmask |= SCHEDULERPROCESSID_COLUMN_BITMASK;

		if (!_setOriginalSchedulerProcessId) {
			_setOriginalSchedulerProcessId = true;

			_originalSchedulerProcessId = _schedulerProcessId;
		}

		_schedulerProcessId = schedulerProcessId;
	}

	public long getOriginalSchedulerProcessId() {
		return _originalSchedulerProcessId;
	}

	@JSON
	@Override
	public String getError() {
		if (_error == null) {
			return "";
		}
		else {
			return _error;
		}
	}

	@Override
	public void setError(String error) {
		_error = error;
	}

	@JSON
	@Override
	public String getOutput() {
		if (_output == null) {
			return "";
		}
		else {
			return _output;
		}
	}

	@Override
	public void setOutput(String output) {
		_output = output;
	}

	@JSON
	@Override
	public Date getStartDate() {
		return _startDate;
	}

	@Override
	public void setStartDate(Date startDate) {
		_startDate = startDate;
	}

	@JSON
	@Override
	public Date getEndDate() {
		return _endDate;
	}

	@Override
	public void setEndDate(Date endDate) {
		_endDate = endDate;
	}

	@JSON
	@Override
	public int getStatus() {
		return _status;
	}

	@Override
	public void setStatus(int status) {
		_columnBitmask |= STATUS_COLUMN_BITMASK;

		if (!_setOriginalStatus) {
			_setOriginalStatus = true;

			_originalStatus = _status;
		}

		_status = status;
	}

	public int getOriginalStatus() {
		return _originalStatus;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), SchedulerProcessLog.class.getName(),
			getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public SchedulerProcessLog toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, SchedulerProcessLog>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		SchedulerProcessLogImpl schedulerProcessLogImpl =
			new SchedulerProcessLogImpl();

		schedulerProcessLogImpl.setMvccVersion(getMvccVersion());
		schedulerProcessLogImpl.setSchedulerProcessLogId(
			getSchedulerProcessLogId());
		schedulerProcessLogImpl.setCompanyId(getCompanyId());
		schedulerProcessLogImpl.setUserId(getUserId());
		schedulerProcessLogImpl.setUserName(getUserName());
		schedulerProcessLogImpl.setCreateDate(getCreateDate());
		schedulerProcessLogImpl.setModifiedDate(getModifiedDate());
		schedulerProcessLogImpl.setSchedulerProcessId(getSchedulerProcessId());
		schedulerProcessLogImpl.setError(getError());
		schedulerProcessLogImpl.setOutput(getOutput());
		schedulerProcessLogImpl.setStartDate(getStartDate());
		schedulerProcessLogImpl.setEndDate(getEndDate());
		schedulerProcessLogImpl.setStatus(getStatus());

		schedulerProcessLogImpl.resetOriginalValues();

		return schedulerProcessLogImpl;
	}

	@Override
	public int compareTo(SchedulerProcessLog schedulerProcessLog) {
		int value = 0;

		value = DateUtil.compareTo(
			getModifiedDate(), schedulerProcessLog.getModifiedDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof SchedulerProcessLog)) {
			return false;
		}

		SchedulerProcessLog schedulerProcessLog = (SchedulerProcessLog)obj;

		long primaryKey = schedulerProcessLog.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return _entityCacheEnabled;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return _finderCacheEnabled;
	}

	@Override
	public void resetOriginalValues() {
		SchedulerProcessLogModelImpl schedulerProcessLogModelImpl = this;

		schedulerProcessLogModelImpl._setModifiedDate = false;

		schedulerProcessLogModelImpl._originalSchedulerProcessId =
			schedulerProcessLogModelImpl._schedulerProcessId;

		schedulerProcessLogModelImpl._setOriginalSchedulerProcessId = false;

		schedulerProcessLogModelImpl._originalStatus =
			schedulerProcessLogModelImpl._status;

		schedulerProcessLogModelImpl._setOriginalStatus = false;

		schedulerProcessLogModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<SchedulerProcessLog> toCacheModel() {
		SchedulerProcessLogCacheModel schedulerProcessLogCacheModel =
			new SchedulerProcessLogCacheModel();

		schedulerProcessLogCacheModel.mvccVersion = getMvccVersion();

		schedulerProcessLogCacheModel.schedulerProcessLogId =
			getSchedulerProcessLogId();

		schedulerProcessLogCacheModel.companyId = getCompanyId();

		schedulerProcessLogCacheModel.userId = getUserId();

		schedulerProcessLogCacheModel.userName = getUserName();

		String userName = schedulerProcessLogCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			schedulerProcessLogCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			schedulerProcessLogCacheModel.createDate = createDate.getTime();
		}
		else {
			schedulerProcessLogCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			schedulerProcessLogCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			schedulerProcessLogCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		schedulerProcessLogCacheModel.schedulerProcessId =
			getSchedulerProcessId();

		schedulerProcessLogCacheModel.error = getError();

		String error = schedulerProcessLogCacheModel.error;

		if ((error != null) && (error.length() == 0)) {
			schedulerProcessLogCacheModel.error = null;
		}

		schedulerProcessLogCacheModel.output = getOutput();

		String output = schedulerProcessLogCacheModel.output;

		if ((output != null) && (output.length() == 0)) {
			schedulerProcessLogCacheModel.output = null;
		}

		Date startDate = getStartDate();

		if (startDate != null) {
			schedulerProcessLogCacheModel.startDate = startDate.getTime();
		}
		else {
			schedulerProcessLogCacheModel.startDate = Long.MIN_VALUE;
		}

		Date endDate = getEndDate();

		if (endDate != null) {
			schedulerProcessLogCacheModel.endDate = endDate.getTime();
		}
		else {
			schedulerProcessLogCacheModel.endDate = Long.MIN_VALUE;
		}

		schedulerProcessLogCacheModel.status = getStatus();

		return schedulerProcessLogCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<SchedulerProcessLog, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<SchedulerProcessLog, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<SchedulerProcessLog, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((SchedulerProcessLog)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<SchedulerProcessLog, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<SchedulerProcessLog, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<SchedulerProcessLog, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((SchedulerProcessLog)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, SchedulerProcessLog>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private static boolean _entityCacheEnabled;
	private static boolean _finderCacheEnabled;

	private long _mvccVersion;
	private long _schedulerProcessLogId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private long _schedulerProcessId;
	private long _originalSchedulerProcessId;
	private boolean _setOriginalSchedulerProcessId;
	private String _error;
	private String _output;
	private Date _startDate;
	private Date _endDate;
	private int _status;
	private int _originalStatus;
	private boolean _setOriginalStatus;
	private long _columnBitmask;
	private SchedulerProcessLog _escapedModel;

}