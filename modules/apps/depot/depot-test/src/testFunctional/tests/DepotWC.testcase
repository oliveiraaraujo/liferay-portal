@component-name = "portal-document-management"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Depot";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();

		ProductMenu.gotoPortlet(
			category = "Repositories",
			panel = "Control Panel",
			portlet = "Repositories");

		Depot.addDepot(
			depotDescription = "This is the description of a depot",
			depotName = "Test Depot Name");
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			User.logoutPG();
		}
	}

	@description = "This ensures that a web content folder can be deleted in a depot."
	@priority = "4"
	test DeleteFolder {
		DepotNavigator.openDepotAdmin();

		DepotNavigator.gotoDepot(
			depotName = "Test Depot Name",
			portlet = "Web Content");

		WebContentFolder.addCP(
			folderDescription = "WC Folder Description",
			folderName = "WC Folder Name");

		WebContentFolder.moveToRecycleBinCP(
			assetType = "Web Content Folder",
			folderName = "WC Folder Name");
	}

	@description = "This test deletes multiple web content in a depot."
	@priority = "5"
	test DeleteMultipleWebContent {
		DepotNavigator.openDepotAdmin();

		DepotNavigator.gotoDepot(
			depotName = "Test Depot Name",
			portlet = "Web Content");

		for (var i : list "1,2,3") {
			WebContentNavigator.gotoAddCP();

			WebContent.addCP(
				webContentContent = "WC WebContent Content",
				webContentTitle = "WC WebContent Title ${i}");

			PortletEntry.publish();
		}

		LexiconEntry.changeDisplayStyle(displayStyle = "list");

		for (var rowEntry : list "WC WebContent Title 1,WC WebContent Title 2,WC WebContent Title 3") {
			Check(
				key_rowEntry = "${rowEntry}",
				locator1 = "ContentRow#ENTRY_CONTENT_ENTRY_CHECKBOX");
		}

		ClickNoError(locator1 = "Icon#DELETE");

		AssertConfirm(value1 = "Are you sure you want to move the selected entries to the Recycle Bin?");

		AssertTextEquals(
			locator1 = "Message#EMPTY_INFO",
			value1 = "No web content was found.");
	}

	@description = "This test deletes template and structure in a depot."
	@priority = "5"
	test DeleteTemplateAndStructure {
		DepotNavigator.openDepotAdmin();

		DepotNavigator.gotoDepot(
			depotName = "Test Depot Name",
			portlet = "Web Content");

		NavItem.gotoStructures();

		WebContentStructures.addCP(
			structureDescription = "WC Structure Description",
			structureName = "WC Structure Name");

		DynamicDataMapping.addField(
			field = "Text",
			fieldFieldLabel = "Text",
			fieldName = "Text");

		WebContentStructures.saveCP(structureName = "WC Structure Name");

		DepotNavigator.openDepotAdmin();

		DepotNavigator.gotoDepot(
			depotName = "Test Depot Name",
			portlet = "Web Content");

		NavItem.gotoTemplates();

		WebContentTemplates.addCP(
			structureName = "WC Structure Name",
			templateDescription = "WC Template Description",
			templateFieldNames = "Text",
			templateName = "WC Template Name");

		DepotNavigator.openDepotAdmin();

		DepotNavigator.gotoDepot(
			depotName = "Test Depot Name",
			portlet = "Web Content");

		NavItem.gotoTemplates();

		WebContentTemplates.deleteCP(templateName = "WC Template Name");

		AssertTextEquals(
			locator1 = "Message#EMPTY_INFO",
			value1 = "There are no templates.");

		DepotNavigator.openDepotAdmin();

		DepotNavigator.gotoDepot(
			depotName = "Test Depot Name",
			portlet = "Web Content");

		NavItem.gotoStructures();

		WebContentStructures.deleteCP(structureName = "WC Structure Name");

		AssertTextEquals(
			locator1 = "Message#EMPTY_INFO",
			value1 = "There are no structures.");
	}

	@description = "This ensures that a web content can be edited in a depot."
	@priority = "5"
	test EditWebContent {
		DepotNavigator.openDepotAdmin();

		DepotNavigator.gotoDepot(
			depotName = "Test Depot Name",
			portlet = "Web Content");

		WebContentNavigator.gotoAddCP();

		WebContent.addCP(
			webContentContent = "WC WebContent Content",
			webContentTitle = "WC WebContent Title");

		PortletEntry.publish();

		WebContentNavigator.gotoEditCP(webContentTitle = "WC WebContent Title");

		WebContent.editCP(
			webContentContentEdit = "WC WebContent Content Edit",
			webContentTitle = "WC WebContent Title",
			webContentTitleEdit = "WC WebContent Title Edit");

		WebContentNavigator.gotoEditCP(webContentTitle = "WC WebContent Title Edit");

		WebContent.viewCP(
			webContentContent = "WC WebContent Content Edit",
			webContentTitle = "WC WebContent Title Edit");
	}

	@description = "This ensures that a LAR file consisting of web content can be imported in a depot."
	@priority = "4"
	test ImportWebContent {
		JSONWebcontent.addWebContent(
			content = "Web Content Content",
			groupName = "Guest",
			title = "Web Content Title");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "guest");

		LAR.exportPortlet(larFileName = "ExportWebContent.lar");

		DepotNavigator.openDepotAdmin();

		DepotNavigator.gotoDepot(
			depotName = "Test Depot Name",
			portlet = "Web Content");

		LAR.importPortlet(larFileName = "ExportWebContent.lar");

		DepotNavigator.openDepotAdmin();

		DepotNavigator.gotoDepot(
			depotName = "Test Depot Name",
			portlet = "Web Content");

		WebContent.viewTitle(webContentTitle = "Web Content Title");
	}

	@description = "This ensures that web content with structure can be restored to a depot."
	@priority = "5"
	test RestoreWebContentWithStructure {
		DepotNavigator.openDepotAdmin();

		DepotNavigator.gotoDepot(
			depotName = "Test Depot Name",
			portlet = "Web Content");

		NavItem.gotoStructures();

		WebContentStructures.addCP(
			structureDescription = "WC Structure Description",
			structureName = "WC Structure Name");

		DynamicDataMapping.addField(
			field = "Text",
			fieldFieldLabel = "Text",
			fieldName = "Text");

		WebContentStructures.saveCP(structureName = "WC Structure Name");

		DepotNavigator.openDepotAdmin();

		DepotNavigator.gotoDepot(
			depotName = "Test Depot Name",
			portlet = "Web Content");

		NavItem.gotoTemplates();

		WebContentTemplates.addCP(
			structureName = "WC Structure Name",
			templateDescription = "WC Template Description",
			templateFieldNames = "Text",
			templateName = "WC Template Name");

		DepotNavigator.openDepotAdmin();

		DepotNavigator.gotoDepot(
			depotName = "Test Depot Name",
			portlet = "Web Content");

		WebContentNavigator.gotoAddWithStructureCP(structureName = "WC Structure Name");

		WebContent.addWithStructureCP(
			webContentText = "WC WebContent Text",
			webContentTitle = "WC WebContent Title");

		PortletEntry.publish();

		WebContent.moveToRecycleBinCP(
			assetType = "Web Content Article",
			webContentTitle = "WC WebContent Title");

		RecycleBin.openRecycleBinAdmin(siteURLKey = "test-depot-name");

		RecycleBin.viewCP(
			assetName = "WC WebContent Title",
			assetType = "Web Content Article",
			deleteUser = "Test Test");

		RecycleBin.restoreCP(
			assetName = "WC WebContent Title",
			assetRestoreLocation = "Home",
			assetType = "Web Content Article");

		DepotNavigator.openDepotAdmin();

		DepotNavigator.gotoDepot(
			depotName = "Test Depot Name",
			portlet = "Web Content");

		WebContent.viewWithStructureCP(
			webContentText = "WC WebContent Text",
			webContentTitle = "WC WebContent Title");
	}

}