@component-name = "portal-document-management"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Depot";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			DMDocument.tearDownCP();

			DMFolder.tearDownCP();

			User.logoutPG();
		}
	}

	@description = "This ensures that a depot can be deleted."
	@priority = "5"
	test DeleteDepot {
		DepotNavigator.openDepotAdmin();

		Depot.addDepot(
			depotDescription = "This is the description of a depot",
			depotName = "Test Depot Name");

		DepotNavigator.openDepotAdmin();

		Depot.deleteCP(depotName = "Test Depot Name");

		Depot.viewDefaultCP();
	}

	@description = "This ensures that a depot with a folder can be deleted."
	@priority = "4"
	test DeleteDepotWithFolder {
		DepotNavigator.openDepotAdmin();

		Depot.addDepot(
			depotDescription = "This is the description of a depot",
			depotName = "Test Depot Name");

		DepotNavigator.openDepotAdmin();

		DepotNavigator.gotoDepot(depotName = "Test Depot Name");

		DMFolder.addCP(dmFolderName = "DM Folder Name");

		DepotNavigator.openDepotAdmin();

		Depot.deleteCP(depotName = "Test Depot Name");

		Depot.viewDefaultCP();
	}

	@description = "This ensures that a depot with multiple files can be deleted."
	@priority = "4"
	test DeleteDepotWithMultipleFiles {
		DepotNavigator.openDepotAdmin();

		Depot.addDepot(
			depotDescription = "This is the description of a depot",
			depotName = "Test Depot Name");

		DepotNavigator.openDepotAdmin();

		DepotNavigator.gotoDepot(depotName = "Test Depot Name");

		DMDocument.addMultipleCP(dmDocumentFileList = "Document_1.doc,Document_2.jpg,Document_3.xls");

		DepotNavigator.openDepotAdmin();

		Depot.deleteCP(depotName = "Test Depot Name");

		Depot.viewDefaultCP();
	}

	@description = "This ensures that a depot can be edited."
	@priority = "5"
	test EditDepot {
		DepotNavigator.openDepotAdmin();

		Depot.addDepot(
			depotDescription = "This is the description of a depot",
			depotName = "Test Depot Name");

		DepotNavigator.openDepotAdmin();

		Depot.editDepot(
			depotDescriptionEdit = "This is an edited description of a depot",
			depotName = "Test Depot Name",
			depotNameEdit = "Edited Test Depot Name");

		DepotNavigator.openDepotAdmin();

		DepotNavigator.gotoDepot(depotName = "Edited Test Depot Name");
	}

	@description = "This ensures that a depot's description can be searched."
	@priority = "5"
	test SearchForDepotDescription {
		DepotNavigator.openDepotAdmin();

		Depot.addDepot(
			depotDescription = "Description 1",
			depotName = "Depo 1");

		DepotNavigator.openDepotAdmin();

		Depot.addDepot(
			depotDescription = "Description 2",
			depotName = "Depo 2");

		DepotNavigator.openDepotAdmin();

		Depot.addDepot(
			depotDescription = "Description 3",
			depotName = "Depo 3");

		DepotNavigator.openDepotAdmin();

		Depot.addDepot(depotName = "Should be not returned in search");

		DepotNavigator.openDepotAdmin();

		Search.searchCP(searchTerm = "Description");

		Depot.viewSearchResult(
			excludedResults = "Should not be returned in search",
			includedResults = "Depo 1,Depo 2,Depo 3",
			resultCount = "3",
			searchTerm = "Description");

		DepotNavigator.gotoDepot(depotName = "Depo 1");
	}

	@description = "This ensures that a depot's title can be searched."
	@priority = "5"
	test SearchForDepotTitle {
		DepotNavigator.openDepotAdmin();

		Depot.addDepot(depotName = "Depo 1");

		DepotNavigator.openDepotAdmin();

		Depot.addDepot(depotName = "Depo 2");

		DepotNavigator.openDepotAdmin();

		Depot.addDepot(depotName = "Depo 3");

		DepotNavigator.openDepotAdmin();

		Depot.addDepot(depotName = "Should be not returned in search");

		DepotNavigator.openDepotAdmin();

		Search.searchCP(searchTerm = "Depo");

		Depot.viewSearchResult(
			excludedResults = "Should not be returned in search",
			includedResults = "Depo 1,Depo 2,Depo 3",
			resultCount = "3",
			searchTerm = "Depo");

		DepotNavigator.gotoDepot(depotName = "Depo 1");
	}

	@description = "This ensures that a depot can be added."
	@priority = "5"
	test Smoke {
		ProductMenu.gotoPortlet(
			category = "Repositories",
			panel = "Control Panel",
			portlet = "Repositories");

		Depot.addDepot(
			depotDescription = "This is the description of a depot",
			depotName = "Test Depot Name");

		DepotNavigator.openDepotAdmin();

		DepotNavigator.gotoDepot(depotName = "Test Depot Name");
	}

}