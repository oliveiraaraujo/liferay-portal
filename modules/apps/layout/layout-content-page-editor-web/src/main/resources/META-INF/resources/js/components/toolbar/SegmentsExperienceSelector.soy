{namespace com.liferay.layout.content.page.editor.web.SegmentsExperienceSelector}

/**
 * SegmentsExperienceSelector
 */
{template .render}
	{@param? activeSegmentsExperienceName: string }
	{@param? availableSegmentsExperiencesList: list<[
		segmentsExperienceId: string,
		hasLockedSegmentsExperiment: bool,
		name: string,
		priority: int,
		segmentsEntryName: string,
		segmentsEntryId: string,
		segmentsExperimentStatus: [
			label: string,
			value: number
		],
		segmentsExperimentURL: string
	]>}
	{@param? hasEditSegmentsEntryPermission: bool }
	{@param? hasUpdatePermissions: bool }
	{@param? defaultSegmentsExperienceId: string }
	{@param? _closeEditModal: any }
	{@param? _closeCreateModal: any }
	{@param? _dismissCreationError: any }
	{@param? _dismissDeletionError: any }
	{@param? _dismissEditionError: any }
	{@param? _handleDeleteButtonClick: any }
	{@param? _handleMoveExperienceDownButtonClick: any }
	{@param? _handleMoveExperienceUpButtonClick: any }
	{@param? _handleEditButtonClick: any }
	{@param? _handleSegmentsExperienceClick: any}
	{@param? _handleSegmentsExperimentNavigation: any}
	{@param? _handleNewSegmentButtonClick: any}
	{@param? _handleDropdownBlur: any}
	{@param? _handleDropdownFocus: any}
	{@param? _handleDropdownButtonClick: any}
	{@param? _handleEditFormSubmit: any }
	{@param? _createSegmentsExperience: any }
	{@param? _segmentsExperienceErrors: ? }
	{@param? _openCreateModal: any }
	{@param? _toggleEditModal: any }
	{@param? _toggleCreateModal: any }
	{@param? availableSegmentsEntriesList: list<[
		segmentsEntryId: string,
		name: string
	]>}
	{@param? lockedActiveSegmentsExperience: bool }
	{@param? segmentsExperienceId: string}
	{@param? openDropdown: bool}
	{@param? portletNamespace: string}
	{@param? modalStates: [
		creation: [
			name: string | null,
			segmentsEntryId: string | null
		],
		edition: [
			name: string | null,
			segmentsEntryId: string | null
		]
	]}
	{@param spritemap: string}

	{let $canCreateExperiences: (
			($hasEditSegmentsEntryPermission == true or
			($availableSegmentsEntriesList and length($availableSegmentsEntriesList) > 0))
		)
	/}

	{if
		$canCreateExperiences and
		$availableSegmentsExperiencesList and
		(
			($hasUpdatePermissions and (length($availableSegmentsExperiencesList) > 0)) or
			((not $hasUpdatePermissions) and (length($availableSegmentsExperiencesList) > 1))
		)
	}
		<div
			class="segments-experience-selector position-relative"
			tabindex="0"
		>
			<label class="mr-2" for="{$portletNamespace}SegmentsExperienceSelector">
				{msg desc=""}experience{/msg}
			</label>

			<button
				class="align-items-end btn btn-sm btn-secondary d-inline-flex form-control-select justify-content-between mr-2 text-left text-truncate"
				data-onclick="{$_handleDropdownButtonClick}"
				data-onblur="{$_handleDropdownBlur}"
				type="button"
				id="{$portletNamespace}SegmentsExperienceSelector"
			>
			  <span class="text-truncate">{$activeSegmentsExperienceName}</span>

				{if $lockedActiveSegmentsExperience}
					{call ClayIcon.render}
						{param spritemap: $spritemap /}
						{param symbol: 'lock' /}
					{/call}
				{/if}
			</button>

			<div
				class="p-4 rounded dropdown-menu {if $openDropdown}toggled{/if}"
				data-onfocus="{$_handleDropdownFocus}"
				data-onblur="{$_handleDropdownBlur}"
				tabindex="-1"
			>
				<div class="align-items-end d-flex justify-content-between mb-4">
					<h3 class="mb-0">{msg desc=""}select-experience{/msg}</h3>

					{if $canCreateExperiences == true and $hasUpdatePermissions}
						{let $newExperience kind="text"}
							{msg desc=""}new-experience{/msg}
						{/let}

						{call ClayButton.render}
							{param ariaLabel: $newExperience /}
							{param label: $newExperience /}
							{param events: [
								'click': $_openCreateModal,
							] /}
							{param ref: 'newExperienceBtn' /}
							{param size: 'sm' /}
							{param spritemap: $spritemap /}
							{param style: 'secondary' /}
						{/call}
					{/if}
				</div>

				{if $_segmentsExperienceErrors and $_segmentsExperienceErrors.deletion }
					{let $errorMessage kind="text"}
						{msg desc=""}an-unexpected-error-occurred-while-deleting-the-experience{/msg}
					{/let}

					{call ClayAlert.render}
						{param elementClasses: 'p-3 pr-5' /}
						{param closeable: true /}
						{param message: '' /}
						{param events: [
							'hide': $_dismissDeletionError
						]/}
						{param spritemap: $spritemap /}
						{param style: 'danger' /}
						{param title: $errorMessage /}
					{/call}
				{/if}

				{if $hasUpdatePermissions}
					{let $experiencesHelpMessage kind="text"}
						{if $availableSegmentsEntriesList and
						length($availableSegmentsEntriesList) < 1 or length($availableSegmentsExperiencesList) < 2}
							{msg desc=""}experience-help-message-empty-state{/msg}
						{else}
							{msg desc=""}experience-help-message-started-state{/msg}
						{/if}
					{/let}

					<p class="mb-4 text-secondary">
						{$experiencesHelpMessage}
					</p>

					{let $experiencesWarning kind="text"}
						{msg desc=""}changes-to-experiences-are-applied-immediately{/msg}
					{/let}

					{let $warning kind="text"}
						{msg desc=""}warning{/msg}:
					{/let}

					{call ClayAlert.render}
						{param elementClasses: 'mx-0  mt-4' /}
						{param closeable: false /}
						{param message: $experiencesWarning /}
						{param spritemap: $spritemap /}
						{param style: 'warning' /}
						{param title: $warning /}
					{/call}
				{/if}

				{let $notDefaultExperienceLength: (length($availableSegmentsExperiencesList) - 2) /}

				{if length($availableSegmentsExperiencesList) > 1}
					<ul class="list-unstyled mt-4">
						{foreach $experience in $availableSegmentsExperiencesList}
							{call com.liferay.layout.content.page.editor.web.segmentsExperiences.ExperienceItem.render }
								{param active: $segmentsExperienceId == $experience.segmentsExperienceId /}
								{param disabledMoveDown: ($notDefaultExperienceLength == index($experience)) /}
								{param disabledMoveUp: isFirst($experience) /}
								{param experience: $experience /}
								{param hasUpdatePermissions: $hasUpdatePermissions /}
								{param isDefaultExperience: $defaultSegmentsExperienceId == $experience.segmentsExperienceId /}
								{param key: $experience.segmentsExperienceId /}
								{param onExperienceDelete: $_handleDeleteButtonClick /}
								{param onExperienceEdit: $_handleEditButtonClick /}
								{param onExperienceSelect: $_handleSegmentsExperienceClick /}
								{param onExperimentNavigation: $_handleSegmentsExperimentNavigation /}
								{param onPriorityDecrease: $_handleMoveExperienceDownButtonClick /}
								{param onPriorityIncrease: $_handleMoveExperienceUpButtonClick /}
								{param spritemap: $spritemap /}
							{/call}
						{/foreach}
					</ul>
				{/if}

			</div>
		</div>

		{let $creationModalTitle kind="text"}
			{msg desc=""}new-experience{/msg}
		{/let}

		{let $experienceNamePlaceHolder kind="text"}
			{msg desc=""}experience-name{/msg}
		{/let}

		{let $experienceNameLabel kind="text"}
			{msg desc=""}name{/msg}
		{/let}

		{let $errorCreatingMessage kind="text"}
			{msg desc=""}an-unexpected-error-occurred-while-creating-the-experience{/msg}
		{/let}

		{let $segmentLabel kind="text"}
			{msg desc=""}audience{/msg}
		{/let}

		{let $creationModalCondition: ($modalStates and $modalStates.creation) ? true : false /}
		{let $errorCreationCondition: ($_segmentsExperienceErrors and $_segmentsExperienceErrors.creation) ? true : false /}

		{call com.liferay.layout.content.page.editor.web.SegmentsExperienceSeletorModal.render }
			{param visible:  $creationModalCondition /}
			{param error: [
				'visible': $errorCreationCondition,
				'message': $errorCreatingMessage,
				'onDismiss': $_dismissCreationError
			] /}
			{param title: $creationModalTitle /}
			{param portletPrefix: $portletNamespace /}
			{param experienceForm: [
				'onExperienceSubmit': $_createSegmentsExperience,
				'formId': 'CreateForm',
				'experienceName': [
					'inputId': 'CreateExperience',
					'placeholder': $experienceNamePlaceHolder,
					'label': $experienceNameLabel,
					'value': ($modalStates and $modalStates.creation) ? $modalStates.creation.name : null
				],
				'segmentSelector': [
					'inputId': 'SegmentSelector',
					'segments':  $availableSegmentsEntriesList,
					'label': $segmentLabel,
					'value': ($modalStates and $modalStates.creation) ? $modalStates.creation.segmentsEntryId : null
				]
			] /}

			{param onClose: $_toggleCreateModal /}
			{param spritemap: $spritemap /}
			{param onDismiss: $_closeCreateModal /}
			{param hasSegmentsEntryPermission: $hasEditSegmentsEntryPermission /}
			{param onNewSegmentClick: $_handleNewSegmentButtonClick /}
			{param type: 'creation' /}
		{/call}

		{let $editionModalTitle kind="text"}
			{msg desc=""}edit-experience{/msg}
		{/let}

		{let $errorEditionMessage kind="text"}
			{msg desc=""}an-unexpected-error-occurred-while-updating-the-experience{/msg}
		{/let}

		{let $editionModalCondition: ($modalStates and $modalStates.edition) ? true : false /}
		{let $errorEditionCondition: ($_segmentsExperienceErrors and $_segmentsExperienceErrors.edition) ? true : false /}

		{call com.liferay.layout.content.page.editor.web.SegmentsExperienceSeletorModal.render }
			{param visible:  $editionModalCondition /}
			{param error: [
				'visible': $errorEditionCondition,
				'message': $errorEditionMessage,
				'onDismiss': $_dismissEditionError
			] /}
			{param title: $editionModalTitle /}
			{param portletPrefix: $portletNamespace /}
			{param experienceForm: [
				'onExperienceSubmit': $_handleEditFormSubmit,
				'formId': 'EditForm',
				'experienceName': [
					'inputId': 'EditExperience',
					'placeholder': $experienceNamePlaceHolder,
					'label': $experienceNameLabel,
					'value': ($modalStates and $modalStates.edition) ? $modalStates.edition.name : null
				],
				'segmentSelector': [
					'inputId': 'SegmentSelector',
					'segments': $availableSegmentsEntriesList,
					'label': $segmentLabel,
					'value': ($modalStates and $modalStates.edition) ? $modalStates.edition.segmentsEntryId : null
				]
			] /}

			{param onClose: $_toggleEditModal /}
			{param spritemap: $spritemap /}
			{param onDismiss: $_closeEditModal /}
			{param hasSegmentsEntryPermission: $hasEditSegmentsEntryPermission /}
			{param onNewSegmentClick: $_handleNewSegmentButtonClick /}
			{param type: 'edition' /}
		{/call}
	{/if}
{/template}